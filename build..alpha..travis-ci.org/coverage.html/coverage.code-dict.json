{"/home/travis/build/npmtest/node-npmtest-conventional-changelog/test.js":"/* istanbul instrument in package npmtest_conventional_changelog */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-conventional-changelog/lib.npmtest_conventional_changelog.js":"/* istanbul instrument in package npmtest_conventional_changelog */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_conventional_changelog = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_conventional_changelog = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-conventional-changelog/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-conventional-changelog && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_conventional_changelog */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_conventional_changelog\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_conventional_changelog.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_conventional_changelog.rollup.js'] =\n            local.assetsDict['/assets.npmtest_conventional_changelog.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_conventional_changelog.__dirname + '/lib.npmtest_conventional_changelog.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-conventional-changelog/node_modules/conventional-changelog/index.js":"'use strict';\nvar conventionalChangelogCore = require('conventional-changelog-core');\n\nfunction conventionalChangelog(options, context, gitRawCommitsOpts, parserOpts, writerOpts) {\n  options.warn = options.warn || function() {};\n\n  if (options.preset) {\n    try {\n      options.config = require('conventional-changelog-' + options.preset.toLowerCase());\n    } catch (err) {\n      options.warn('Preset: \"' + options.preset + '\" does not exist');\n    }\n  }\n\n  return conventionalChangelogCore(options, context, gitRawCommitsOpts, parserOpts, writerOpts);\n}\n\nmodule.exports = conventionalChangelog;\n","/home/travis/build/npmtest/node-npmtest-conventional-changelog/node_modules/conventional-changelog-core/index.js":"'use strict';\nvar gitRawCommits = require('git-raw-commits');\nvar conventionalCommitsParser = require('conventional-commits-parser');\nvar conventionalChangelogWriter = require('conventional-changelog-writer');\nvar stream = require('stream');\nvar through = require('through2');\nvar mergeConfig = require('./lib/merge-config');\n\nfunction conventionalChangelog(options, context, gitRawCommitsOpts, parserOpts, writerOpts) {\n  writerOpts = writerOpts || {};\n\n  var readable = new stream.Readable({\n    objectMode: writerOpts.includeDetails\n  });\n  readable._read = function() {};\n\n  mergeConfig(options, context, gitRawCommitsOpts, parserOpts, writerOpts)\n    .then(function(data) {\n      options = data.options;\n      context = data.context;\n      gitRawCommitsOpts = data.gitRawCommitsOpts;\n      parserOpts = data.parserOpts;\n      writerOpts = data.writerOpts;\n\n      gitRawCommits(gitRawCommitsOpts)\n        .on('error', function(err) {\n          err.message = 'Error in git-raw-commits: ' + err.message;\n          setImmediate(readable.emit.bind(readable), 'error', err);\n        })\n        .pipe(conventionalCommitsParser(parserOpts))\n        .on('error', function(err) {\n          err.message = 'Error in conventional-commits-parser: ' + err.message;\n          setImmediate(readable.emit.bind(readable), 'error', err);\n        })\n        // it would be better if `gitRawCommits` could spit out better formatted data\n        // so we don't need to transform here\n        .pipe(through.obj(function(chunk, enc, cb) {\n          try {\n            options.transform.call(this, chunk, cb);\n          } catch (err) {\n            cb(err);\n          }\n        }))\n        .on('error', function(err) {\n          err.message = 'Error in options.transform: ' + err.message;\n          setImmediate(readable.emit.bind(readable), 'error', err);\n        })\n        .pipe(conventionalChangelogWriter(context, writerOpts))\n        .on('error', function(err) {\n          err.message = 'Error in conventional-changelog-writer: ' + err.message;\n          setImmediate(readable.emit.bind(readable), 'error', err);\n        })\n        .pipe(through({\n          objectMode: writerOpts.includeDetails\n        }, function(chunk, enc, cb) {\n          try {\n            readable.push(chunk);\n          } catch (err) {\n            setImmediate(function() {\n              throw err;\n            });\n          }\n\n          cb();\n        }, function(cb) {\n          readable.push(null);\n\n          cb();\n        }));\n    })\n    .catch(function(err) {\n      setImmediate(readable.emit.bind(readable), 'error', err);\n    });\n\n  return readable;\n}\n\nmodule.exports = conventionalChangelog;\n","/home/travis/build/npmtest/node-npmtest-conventional-changelog/node_modules/conventional-changelog-writer/index.js":"'use strict';\nvar dateFormat = require('dateformat');\nvar join = require('path').join;\nvar readFileSync = require('fs').readFileSync;\nvar semverValid = require('semver').valid;\nvar through = require('through2');\nvar util = require('./lib/util');\nvar _ = require('lodash');\n\nfunction conventionalChangelogWriter(context, options) {\n  var savedKeyCommit;\n  var commits = [];\n  var firstRelease = true;\n  var neverGenerated = true;\n\n  context = _.extend({\n    commit: 'commits',\n    issue: 'issues',\n    date: dateFormat(new Date(), 'yyyy-mm-dd', true)\n  }, context);\n\n  if (!_.isBoolean(context.linkReferences) && (context.repository || context.repoUrl) && context.commit && context.issue) {\n    context.linkReferences = true;\n  }\n\n  options = _.assign({\n    groupBy: 'type',\n    commitsSort: 'header',\n    noteGroupsSort: 'title',\n    notesSort: 'text',\n    generateOn: function(commit) {\n      return semverValid(commit.version);\n    },\n    finalizeContext: function(context) {\n      return context;\n    },\n    debug: function() {},\n    reverse: false,\n    includeDetails: false,\n    ignoreReverted: true,\n    doFlush: true,\n    mainTemplate: readFileSync(join(__dirname, 'templates/template.hbs'), 'utf-8'),\n    headerPartial: readFileSync(join(__dirname, 'templates/header.hbs'), 'utf-8'),\n    commitPartial: readFileSync(join(__dirname, 'templates/commit.hbs'), 'utf-8'),\n    footerPartial: readFileSync(join(__dirname, 'templates/footer.hbs'), 'utf-8')\n  }, options);\n\n  if (!_.isFunction(options.transform) && _.isObject(options.transform) || _.isUndefined(options.transform)) {\n    options.transform = _.assign({\n      hash: function(hash) {\n        if (_.isString(hash)) {\n          return hash.substring(0, 7);\n        }\n      },\n      header: function(header) {\n        return header.substring(0, 100);\n      },\n      committerDate: function(date) {\n        if (!date) {\n          return;\n        }\n\n        return dateFormat(date, 'yyyy-mm-dd', true);\n      }\n    }, options.transform);\n  }\n\n  var generateOn = options.generateOn;\n  if (_.isString(generateOn)) {\n    generateOn = function(commit) {\n      return !_.isUndefined(commit[options.generateOn]);\n    };\n  } else if (!_.isFunction(generateOn)) {\n    generateOn = function() {\n      return false;\n    };\n  }\n\n  options.commitGroupsSort = util.functionify(options.commitGroupsSort);\n  options.commitsSort = util.functionify(options.commitsSort);\n  options.noteGroupsSort = util.functionify(options.noteGroupsSort);\n  options.notesSort = util.functionify(options.notesSort);\n\n  return through.obj(function(chunk, enc, cb) {\n    try {\n      var result;\n      var commit = util.processCommit(chunk, options.transform, context);\n      var keyCommit = commit || chunk;\n\n      // previous blocks of logs\n      if (options.reverse) {\n        if (commit) {\n          commits.push(commit);\n        }\n\n        if (generateOn(keyCommit, commits, context, options)) {\n          neverGenerated = false;\n          result = util.generate(options, commits, context, keyCommit);\n          if (options.includeDetails) {\n            this.push({\n              log: result,\n              keyCommit: keyCommit\n            });\n          } else {\n            this.push(result);\n          }\n\n          commits = [];\n        }\n      } else {\n        if (generateOn(keyCommit, commits, context, options)) {\n          neverGenerated = false;\n          result = util.generate(options, commits, context, savedKeyCommit);\n\n          if (!firstRelease || options.doFlush) {\n            if (options.includeDetails) {\n              this.push({\n                log: result,\n                keyCommit: savedKeyCommit\n              });\n            } else {\n              this.push(result);\n            }\n          }\n\n          firstRelease = false;\n          commits = [];\n          savedKeyCommit = keyCommit;\n        }\n\n        if (commit) {\n          commits.push(commit);\n        }\n      }\n\n      cb();\n    } catch (err) {\n      cb(err);\n    }\n  }, function(cb) {\n    if (!options.doFlush && (options.reverse || neverGenerated)) {\n      cb(null);\n      return;\n    }\n\n    try {\n      var result = util.generate(options, commits, context, savedKeyCommit);\n\n      if (options.includeDetails) {\n        this.push({\n          log: result,\n          keyCommit: savedKeyCommit\n        });\n      } else {\n        this.push(result);\n      }\n\n      cb();\n    } catch (err) {\n      cb(err);\n    }\n  });\n}\n\nmodule.exports = conventionalChangelogWriter;\n","/home/travis/build/npmtest/node-npmtest-conventional-changelog/node_modules/conventional-changelog-writer/lib/util.js":"'use strict';\nvar compareFunc = require('compare-func');\nvar conventionalCommitsFilter = require('conventional-commits-filter');\nvar Handlebars = require('handlebars');\nvar semver = require('semver');\nvar _ = require('lodash');\nvar stringify = require('json-stringify-safe');\n\nfunction compileTemplates(templates) {\n  var main = templates.mainTemplate;\n  var headerPartial = templates.headerPartial;\n  var commitPartial = templates.commitPartial;\n  var footerPartial = templates.footerPartial;\n  var partials = templates.partials;\n\n  if (_.isString(headerPartial)) {\n    Handlebars.registerPartial('header', headerPartial);\n  }\n\n  if (_.isString(commitPartial)) {\n    Handlebars.registerPartial('commit', commitPartial);\n  }\n\n  if (_.isString(footerPartial)) {\n    Handlebars.registerPartial('footer', footerPartial);\n  }\n\n  _.forEach(partials, function(partial, name) {\n    if (_.isString(partial)) {\n      Handlebars.registerPartial(name, partial);\n    }\n  });\n\n  return Handlebars.compile(main, {\n    noEscape: true\n  });\n}\n\nfunction functionify(strOrArr) {\n  if (strOrArr && !_.isFunction(strOrArr)) {\n    return compareFunc(strOrArr);\n  }\n  return strOrArr;\n}\n\nfunction getCommitGroups(groupBy, commits, groupsSort, commitsSort) {\n  var commitGroups = [];\n  var commitGroupsObj = _.groupBy(commits, function(commit) {\n    return commit[groupBy] || '';\n  });\n\n  _.forEach(commitGroupsObj, function(commits, title) {\n    if (title === '') {\n      title = false;\n    }\n\n    commits.sort(commitsSort);\n    commitGroups.push({\n      title: title,\n      commits: commits\n    });\n  });\n\n  commitGroups.sort(groupsSort);\n\n  return commitGroups;\n}\n\nfunction getNoteGroups(notes, noteGroupsSort, notesSort) {\n  var retGroups = [];\n\n  _.forEach(notes, function(note) {\n    var title = note.title;\n    var titleExists = false;\n\n    _.forEach(retGroups, function(group) {\n      if (group.title === title) {\n        titleExists = true;\n        group.notes.push(note);\n        return false;\n      }\n    });\n\n    if (!titleExists) {\n      retGroups.push({\n        title: title,\n        notes: [note]\n      });\n    }\n  });\n\n  retGroups.sort(noteGroupsSort);\n  _.forEach(retGroups, function(group) {\n    group.notes.sort(notesSort);\n  });\n\n  return retGroups;\n}\n\nfunction processCommit(chunk, transform, context) {\n  var commit;\n\n  try {\n    chunk = JSON.parse(chunk);\n  } catch (e) {}\n\n  commit = _.cloneDeep(chunk);\n\n  if (_.isFunction(transform)) {\n    commit = transform(commit, context);\n\n    if (commit) {\n      commit.raw = chunk;\n    }\n\n    return commit;\n  }\n\n  _.forEach(transform, function(el, path) {\n    var value = _.get(commit, path);\n\n    if (_.isFunction(el)) {\n      value = el(value, path);\n    } else {\n      value = el;\n    }\n\n    _.set(commit, path, value);\n  });\n\n  commit.raw = chunk;\n\n  return commit;\n}\n\nfunction getExtraContext(commits, notes, options) {\n  var context = {};\n\n  // group `commits` by `options.groupBy`\n  context.commitGroups = getCommitGroups(options.groupBy, commits, options.commitGroupsSort, options.commitsSort);\n\n  // group `notes` for footer\n  context.noteGroups = getNoteGroups(notes, options.noteGroupsSort, options.notesSort);\n\n  return context;\n}\n\nfunction generate(options, commits, context, keyCommit) {\n  var notes = [];\n  var filteredCommits;\n  var compiled = compileTemplates(options);\n\n  if (options.ignoreReverted) {\n    filteredCommits = conventionalCommitsFilter(commits);\n  } else {\n    filteredCommits = _.clone(commits);\n  }\n\n  _.forEach(filteredCommits, function(commit) {\n    _.map(commit.notes, function(note) {\n      note.commit = commit;\n\n      return note;\n    });\n\n    notes = notes.concat(commit.notes);\n  });\n\n  context = _.merge({}, context, keyCommit, getExtraContext(filteredCommits, notes, options));\n\n  if (keyCommit && keyCommit.committerDate) {\n    context.date = keyCommit.committerDate;\n  }\n\n  if (context.version && semver.valid(context.version)) {\n    context.isPatch = context.isPatch || semver.patch(context.version) !== 0;\n  }\n\n  context = options.finalizeContext(context, options, filteredCommits, keyCommit, commits);\n  options.debug('Your final context is:\\n' + stringify(context, null, 2));\n\n  return compiled(context);\n}\n\nmodule.exports = {\n  compileTemplates: compileTemplates,\n  functionify: functionify,\n  getCommitGroups: getCommitGroups,\n  getNoteGroups: getNoteGroups,\n  processCommit: processCommit,\n  getExtraContext: getExtraContext,\n  generate: generate\n};\n","/home/travis/build/npmtest/node-npmtest-conventional-changelog/node_modules/conventional-changelog-core/lib/merge-config.js":"'use strict';\nvar dateFormat = require('dateformat');\nvar getPkgRepo = require('get-pkg-repo');\nvar gitSemverTags = require('git-semver-tags');\nvar normalizePackageData = require('normalize-package-data');\nvar Q = require('q');\nvar gitRemoteOriginUrl;\ntry {\n  gitRemoteOriginUrl = require('git-remote-origin-url');\n} catch (err) {\n  gitRemoteOriginUrl = function() {\n    return Q.reject(err);\n  };\n}\nvar readPkg = require('read-pkg');\nvar readPkgUp = require('read-pkg-up');\nvar url = require('url');\nvar _ = require('lodash');\n\nvar rhosts = /github|bitbucket|gitlab/i;\nvar rtag = /tag:\\s*[v=]?(.+?)[,\\)]/gi;\n\nfunction semverTagsPromise(options) {\n  return Q.Promise(function(resolve, reject) {\n    gitSemverTags(function(err, result) {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(result);\n      }\n    }, {lernaTags: !!options.lernaPackage, package: options.lernaPackage});\n  });\n}\n\nfunction mergeConfig(options, context, gitRawCommitsOpts, parserOpts, writerOpts) {\n  var configPromise;\n  var pkgPromise;\n  var gitRemoteOriginUrlPromise;\n\n  context = context || {};\n  gitRawCommitsOpts = gitRawCommitsOpts || {};\n\n  options = _.merge({\n    pkg: {\n      transform: function(pkg) {\n        return pkg;\n      }\n    },\n    append: false,\n    releaseCount: 1,\n    debug: function() {},\n    transform: function(commit, cb) {\n      if (_.isString(commit.gitTags)) {\n        var match = rtag.exec(commit.gitTags);\n        rtag.lastIndex = 0;\n\n        if (match) {\n          commit.version = match[1];\n        }\n      }\n\n      if (commit.committerDate) {\n        commit.committerDate = dateFormat(commit.committerDate, 'yyyy-mm-dd', true);\n      }\n\n      cb(null, commit);\n    },\n    lernaPackage: null\n  }, options);\n\n  options.warn = options.warn || options.debug;\n\n  if (options.config) {\n    if (_.isFunction(options.config)) {\n      configPromise = Q.nfcall(options.config);\n    } else {\n      configPromise = Q(options.config); // jshint ignore:line\n    }\n  }\n\n  if (options.pkg) {\n    if (options.pkg.path) {\n      pkgPromise = Q(readPkg(options.pkg.path)); // jshint ignore:line\n    } else {\n      pkgPromise = Q(readPkgUp()); // jshint ignore:line\n    }\n  }\n\n  gitRemoteOriginUrlPromise = Q(gitRemoteOriginUrl()); // jshint ignore:line\n\n  return Q.allSettled([configPromise, pkgPromise, semverTagsPromise(options), gitRemoteOriginUrlPromise])\n    .spread(function(configObj, pkgObj, tagsObj, gitRemoteOriginUrlObj) {\n      var config;\n      var pkg;\n      var fromTag;\n      var repo;\n\n      var hostOpts;\n\n      var gitSemverTags = [];\n\n      if (configPromise) {\n        if (configObj.state === 'fulfilled') {\n          config = configObj.value;\n        } else {\n          options.warn('Error in config' + configObj.reason.toString());\n          config = {};\n        }\n      } else {\n        config = {};\n      }\n\n      context = _.assign(context, config.context);\n\n      if (options.pkg) {\n        if (pkgObj.state === 'fulfilled') {\n          if (options.pkg.path) {\n            pkg = pkgObj.value;\n          } else {\n            pkg = pkgObj.value.pkg || {};\n          }\n\n          pkg = options.pkg.transform(pkg);\n\n        } else if (options.pkg.path) {\n          options.warn(pkgObj.reason.toString());\n        }\n      }\n\n      if ((!pkg || !pkg.repository || !pkg.repository.url) && gitRemoteOriginUrlObj.state === 'fulfilled') {\n        pkg = pkg || {};\n        pkg.repository = pkg.repository || {};\n        pkg.repository.url = gitRemoteOriginUrlObj.value;\n        normalizePackageData(pkg);\n      }\n\n      if (pkg) {\n        context.version = context.version || pkg.version;\n\n        try {\n          repo = getPkgRepo(pkg);\n        } catch (err) {\n          repo = {};\n        }\n\n        if (repo.browse) {\n          var browse = repo.browse();\n          var parsedBrowse = url.parse(browse);\n          context.host = context.host || (repo.domain ? (parsedBrowse.protocol + (parsedBrowse.slashes ? '//' : '') + repo.domain) : null);\n          context.owner = context.owner || repo.user || '';\n          context.repository = context.repository || repo.project;\n          context.repoUrl = browse;\n        }\n\n        context.packageData = pkg;\n      }\n\n      if (tagsObj.state === 'fulfilled') {\n        gitSemverTags = context.gitSemverTags = tagsObj.value;\n        fromTag = gitSemverTags[options.releaseCount - 1];\n        var lastTag = gitSemverTags[0];\n\n        if (lastTag === context.version || lastTag === 'v' + context.version) {\n          if (options.outputUnreleased) {\n            context.version = 'Unreleased';\n          } else {\n            options.outputUnreleased = false;\n          }\n        }\n      }\n\n      if (!_.isBoolean(options.outputUnreleased)) {\n        options.outputUnreleased = true;\n      }\n\n      if (context.host && (!context.issue || !context.commit || !parserOpts || !parserOpts.referenceActions)) {\n        var type;\n\n        if (context.host) {\n          var match = context.host.match(rhosts);\n          if (match) {\n            type = match[0];\n          }\n        } else if (repo && repo.type) {\n          type = repo.type;\n        }\n\n        if (type) {\n          hostOpts = require('../hosts/' + type);\n\n          context = _.assign({\n            issue: hostOpts.issue,\n            commit: hostOpts.commit\n          }, context);\n        } else {\n          options.warn('Host: \"' + context.host + '\" does not exist');\n          hostOpts = {};\n        }\n      } else {\n        hostOpts = {};\n      }\n\n      gitRawCommitsOpts = _.assign({\n          format: '%B%n-hash-%n%H%n-gitTags-%n%d%n-committerDate-%n%ci',\n          from: fromTag,\n          merges: false,\n          debug: options.debug\n        },\n        config.gitRawCommitsOpts,\n        gitRawCommitsOpts\n      );\n\n      if (options.append) {\n        gitRawCommitsOpts.reverse = gitRawCommitsOpts.reverse || true;\n      }\n\n      parserOpts = _.assign(\n        {}, config.parserOpts, {\n          warn: options.warn\n        },\n        parserOpts);\n\n      if (hostOpts.referenceActions && parserOpts) {\n        parserOpts.referenceActions = hostOpts.referenceActions;\n      }\n\n      if (_.isEmpty(parserOpts.issuePrefixes) && hostOpts.issuePrefixes) {\n        parserOpts.issuePrefixes = hostOpts.issuePrefixes;\n      }\n\n      writerOpts = _.assign({\n          finalizeContext: function(context, writerOpts, filteredCommits, keyCommit, originalCommits) {\n            var firstCommit = originalCommits[0];\n            var lastCommit = originalCommits[originalCommits.length - 1];\n            var firstCommitHash = firstCommit ? firstCommit.hash : null;\n            var lastCommitHash = lastCommit ? lastCommit.hash : null;\n\n            if ((!context.currentTag || !context.previousTag) && keyCommit) {\n              var match = /tag:\\s*(.+?)[,\\)]/gi.exec(keyCommit.gitTags);\n              var currentTag = context.currentTag;\n              context.currentTag = currentTag || match ? match[1] : null;\n              var index = gitSemverTags.indexOf(context.currentTag);\n\n              // if `keyCommit.gitTags` is not a semver\n              if (index === -1) {\n                context.currentTag = currentTag || null;\n              } else {\n                var previousTag = context.previousTag = gitSemverTags[index + 1];\n\n                if (!previousTag) {\n                  if (options.append) {\n                    context.previousTag = context.previousTag || firstCommitHash;\n                  } else {\n                    context.previousTag = context.previousTag || lastCommitHash;\n                  }\n                }\n              }\n            } else {\n              context.previousTag = context.previousTag || gitSemverTags[0];\n\n              if (context.version === 'Unreleased') {\n                if (options.append) {\n                  context.currentTag = context.currentTag || lastCommitHash;\n                } else {\n                  context.currentTag = context.currentTag || firstCommitHash;\n                }\n              } else {\n                if (!context.currentTag) {\n                  context.currentTag = options.lernaPackage ? options.lernaPackage + '@' + context.version : 'v' + context.version;\n                }\n              }\n            }\n\n            if (!_.isBoolean(context.linkCompare) && context.previousTag && context.currentTag) {\n              context.linkCompare = true;\n            }\n\n            return context;\n          },\n          debug: options.debug\n        },\n        config.writerOpts, {\n          reverse: options.append,\n          doFlush: options.outputUnreleased\n        },\n        writerOpts\n      );\n\n      return {\n        options: options,\n        context: context,\n        gitRawCommitsOpts: gitRawCommitsOpts,\n        parserOpts: parserOpts,\n        writerOpts: writerOpts\n      };\n    });\n}\n\nmodule.exports = mergeConfig;\n"}